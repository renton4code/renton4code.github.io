{"version":3,"sources":["webpack:///./src/components/common/StoreWidget.vue?e0a6","webpack:///src/components/common/StoreWidget.vue","webpack:///./src/components/common/StoreWidget.vue?1c07","webpack:///./src/components/common/StoreWidget.vue","webpack:///./src/components/common/StoreWidget.vue?b18c"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","model","value","callback","$$v","isVisible","expression","slot","_v","_s","$t","numberOfSelectedAddresses","isIndeterminate","selectAll","ref","storeAddresses","selectedStoreAddresses","on","updateStoreAddressesSelection","nativeOn","$event","applySelectedChanges","staticRenderFns","name","components","GlovoBtn","data","selectedAddresses","computed","user","availableStoreAddresses","get","set","$refs","storeAddressTree","setCheckedKeys","selected","length","cities","treeData","mapCities","mounted","methods","updateSelectedStoreAddresses","node","isLeaf","getCheckedKeys","map","mapCity","label","city","id","code","children","mapStores","stores","mapStore","store","mapStoreAddresses","mapStoreAddress","storeAddress","address","component"],"mappings":"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","file":"js/chunk-6ae9cf8c.b9088e2a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"store-widget\"},[_c('el-popover',{attrs:{\"visible-arrow\":false,\"popper-class\":\"store-popper\",\"trigger\":\"click\",\"width\":\"400\",\"placement\":\"bottom-start\"},model:{value:(_vm.isVisible),callback:function ($$v) {_vm.isVisible=$$v},expression:\"isVisible\"}},[_c('el-button',{attrs:{\"slot\":\"reference\"},slot:\"reference\"},[_vm._v(\" \"+_vm._s(((_vm.$t('order.stores')) + \" (\" + _vm.numberOfSelectedAddresses + \")\"))+\" \"),_c('font-awesome-icon',{attrs:{\"icon\":\"caret-down\"}})],1),_c('el-checkbox',{attrs:{\"indeterminate\":_vm.isIndeterminate},model:{value:(_vm.selectAll),callback:function ($$v) {_vm.selectAll=$$v},expression:\"selectAll\"}},[_vm._v(\" \"+_vm._s(_vm.$t('common.select.all'))+\" \")]),_c('el-tree',{ref:\"storeAddressTree\",attrs:{\"data\":_vm.storeAddresses,\"default-checked-keys\":_vm.selectedStoreAddresses,\"default-expanded-keys\":_vm.selectedStoreAddresses,\"node-key\":\"id\",\"show-checkbox\":\"\"},on:{\"check-change\":_vm.updateStoreAddressesSelection}}),_c('glovo-btn',{attrs:{\"text\":_vm.$t('reports.filter.button'),\"uppercase\":true,\"bold\":true,\"type\":\"green\"},nativeOn:{\"click\":function($event){return _vm.applySelectedChanges($event)}}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"store-widget\">\n    <el-popover\n      v-model=\"isVisible\"\n      :visible-arrow=\"false\"\n      popper-class=\"store-popper\"\n      trigger=\"click\"\n      width=\"400\"\n      placement=\"bottom-start\"\n    >\n      <el-button slot=\"reference\">\n        {{ `${$t('order.stores')} (${numberOfSelectedAddresses})` }}\n        <font-awesome-icon icon=\"caret-down\" />\n      </el-button>\n      <el-checkbox v-model=\"selectAll\" :indeterminate=\"isIndeterminate\">\n        {{ $t('common.select.all') }}\n      </el-checkbox>\n      <el-tree\n        ref=\"storeAddressTree\"\n        :data=\"storeAddresses\"\n        :default-checked-keys=\"selectedStoreAddresses\"\n        :default-expanded-keys=\"selectedStoreAddresses\"\n        node-key=\"id\"\n        show-checkbox\n        @check-change=\"updateStoreAddressesSelection\"\n      />\n      <glovo-btn\n        :text=\"$t('reports.filter.button')\"\n        :uppercase=\"true\"\n        :bold=\"true\"\n        type=\"green\"\n        @click.native=\"applySelectedChanges\"\n      />\n    </el-popover>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport GlovoBtn from 'common/GlovoBtn'\nimport {\n  GET_CURRENT_STORE_ADMIN_GETTER,\n  GET_SELECTED_STORE_ADDRESS_IDS_GETTER,\n  GET_AVAILABLE_STORE_ADDRESS_IDS_GETTER,\n  SET_SELECTED_STORE_ADDRESS_IDS\n} from '@/modules/authentication'\n\nexport default {\n  name: 'StoreWidget',\n  components: {\n    GlovoBtn\n  },\n  data() {\n    return {\n      isVisible: false,\n      selectedAddresses: []\n    }\n  },\n  computed: {\n    ...mapGetters('authentication', [\n      GET_CURRENT_STORE_ADMIN_GETTER,\n      GET_SELECTED_STORE_ADDRESS_IDS_GETTER,\n      GET_AVAILABLE_STORE_ADDRESS_IDS_GETTER\n    ]),\n    user() {\n      return this[GET_CURRENT_STORE_ADMIN_GETTER]\n    },\n    selectedStoreAddresses() {\n      return this[GET_SELECTED_STORE_ADDRESS_IDS_GETTER]\n    },\n    availableStoreAddresses() {\n      return this[GET_AVAILABLE_STORE_ADDRESS_IDS_GETTER]\n    },\n    selectAll: {\n      get() {\n        return (\n          this.selectedAddresses.length === this.availableStoreAddresses.length\n        )\n      },\n      set(shouldSelectAll) {\n        const selected = shouldSelectAll ? this.availableStoreAddresses : []\n        this.$refs.storeAddressTree.setCheckedKeys(selected)\n      }\n    },\n    isIndeterminate() {\n      return (\n        this.selectedAddresses.length !== 0 &&\n        this.selectedAddresses.length !== this.availableStoreAddresses.length\n      )\n    },\n    numberOfSelectedAddresses() {\n      return this.selectedStoreAddresses.length\n    },\n    storeAddresses() {\n      let treeData = []\n      if (this.user && this.user.cities) {\n        treeData = this.mapCities(this.user.cities)\n      }\n      return treeData\n    }\n  },\n  mounted() {\n    this.selectedAddresses = this.selectedStoreAddresses\n  },\n  methods: {\n    ...mapActions('authentication', [SET_SELECTED_STORE_ADDRESS_IDS]),\n    updateSelectedStoreAddresses(storeAddressesIds) {\n      this[SET_SELECTED_STORE_ADDRESS_IDS](storeAddressesIds)\n    },\n    applySelectedChanges() {\n      this.updateSelectedStoreAddresses(this.selectedAddresses)\n      this.isVisible = false\n    },\n    updateStoreAddressesSelection(node) {\n      if (node.isLeaf) {\n        this.selectedAddresses = this.$refs.storeAddressTree.getCheckedKeys(\n          true\n        )\n      }\n    },\n    mapCities(cities) {\n      return cities.map(this.mapCity)\n    },\n    mapCity(city) {\n      return {\n        ...city,\n        label: city.name,\n        id: city.code,\n        children: this.mapStores(city.stores)\n      }\n    },\n    mapStores(stores) {\n      if (stores && stores.length > 0) {\n        return stores.map(this.mapStore)\n      }\n      return []\n    },\n    mapStore(store) {\n      return {\n        ...store,\n        label: store.name,\n        id: store.id,\n        children: this.mapStoreAddresses(store.storeAddresses)\n      }\n    },\n    mapStoreAddresses(storeAddresses) {\n      if (storeAddresses && storeAddresses.length > 0) {\n        return storeAddresses.map(this.mapStoreAddress)\n      }\n      return []\n    },\n    mapStoreAddress(storeAddress) {\n      return {\n        ...storeAddress,\n        label: storeAddress.address,\n        id: storeAddress.id,\n        isLeaf: true\n      }\n    }\n  }\n}\n</script>\n<style lang=\"scss\">\n@import '~styles';\n\n.store-widget {\n  & .el-button {\n    border: 1px solid $green;\n    font-family: $font-family-bold;\n    color: $green;\n    font-size: $font-size-body2;\n    line-height: 1em;\n  }\n}\n.store-popper {\n  max-width: $mobile-max-width;\n  .el-checkbox__label {\n    text-transform: uppercase;\n  }\n  .el-checkbox__inner {\n    width: 20px;\n    height: 20px;\n    &::after {\n      height: 8px;\n      left: 5px;\n      width: 4px;\n      top: 1px;\n    }\n  }\n  .el-tree {\n    border: none;\n    border-top: 1px solid $grey-e4;\n    margin-top: 10px;\n    max-height: 460px;\n    overflow-y: scroll;\n    & .el-tree-node__expand-icon {\n      margin-left: 5px;\n    }\n    & .el-tree-node__content > .el-checkbox {\n      margin-right: 5px;\n    }\n  }\n  .btn-green {\n    display: block;\n    margin: 0 auto;\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StoreWidget.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StoreWidget.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./StoreWidget.vue?vue&type=template&id=6bc93a5f&\"\nimport script from \"./StoreWidget.vue?vue&type=script&lang=js&\"\nexport * from \"./StoreWidget.vue?vue&type=script&lang=js&\"\nimport style0 from \"./StoreWidget.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StoreWidget.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}